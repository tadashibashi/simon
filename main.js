(()=>{"use strict";var t,e=function(){function t(t,e){this.props=t,this.state=e,this.stateHistory=[],this.onStateUpdated=null}return t.prototype.reducer=function(t,e){var n=this.reducerImpl(t,e,this.state);Object.is(n,this.state)||(this.stateHistory.push({state:n,time:new Date}),this.state=n,this.onStateUpdated&&this.onStateUpdated(this))},t}(),n=function(){function t(t,e){var n=t.context;this.mEffect=t,this.mDry=new GainNode(n),this.mDry.gain.value=0,this.mWet=new GainNode(n),this.mWet.gain.value=1,this.mInput=new GainNode(n),this.mOutput=new GainNode(n),this.mInput.connect(this.mDry),this.mInput.connect(this.mWet),this.mDry.connect(this.mOutput),this.mWet.connect(this.mEffect),this.mEffect.connect(this.mOutput),this.mOutput.connect(e||n.destination)}return Object.defineProperty(t.prototype,"effect",{get:function(){return this.mEffect},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"input",{get:function(){return this.mInput},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"output",{get:function(){return this.mOutput},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"dry",{get:function(){return this.mDry.gain},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"wet",{get:function(){return this.mWet.gain},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"preGain",{get:function(){return this.mInput},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"postGain",{get:function(){return this.mOutput},enumerable:!1,configurable:!0}),t.prototype.connect=function(t){this.disconnect(),this.mOutput.connect(t)},t.prototype.disconnect=function(){this.mOutput.disconnect()},t.prototype.setWetDry=function(t,e){if(void 0===e&&(e=0),t=Math.min(Math.max(t,0),1),e>0){var n=this.mEffect.context.currentTime+e;this.mDry.gain.linearRampToValueAtTime(1-t,n),this.mWet.gain.linearRampToValueAtTime(t,n)}else this.mDry.gain.value=1-t,this.mWet.gain.value=t},t.prototype.setWet=function(t,e){void 0===e&&(e=0),t=Math.max(t,0),e>0?this.mWet.gain.linearRampToValueAtTime(t,this.mEffect.context.currentTime+e):this.mWet.gain.value=t},t.prototype.setDry=function(t,e){void 0===e&&(e=0),t=Math.max(t,0),e>0?this.mDry.gain.linearRampToValueAtTime(t,this.mEffect.context.currentTime+e):this.mDry.gain.value=t},t.prototype.dispose=function(){this.mDry.disconnect(),this.mWet.disconnect(),this.mEffect.disconnect(),this.mInput.disconnect(),this.mOutput.disconnect(),this.mDry=null,this.mWet=null,this.mEffect=null,this.mInput=null,this.mOutput=null},t}(),o=function(){function t(t,e){this.mContext=t,this.mPreGain=new GainNode(t),this.mPostGain=new GainNode(t),this.mPreGain.connect(this.mPostGain),this.mPostGain.connect(e||t.destination),this.mEffects=[]}return Object.defineProperty(t.prototype,"input",{get:function(){return this.mPreGain},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"output",{get:function(){return this.mPostGain},enumerable:!1,configurable:!0}),t.prototype.connect=function(t){this.output.disconnect(),this.output.connect(t)},Object.defineProperty(t.prototype,"context",{get:function(){return this.mPreGain.context},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"preGain",{get:function(){return this.mPreGain},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"gain",{get:function(){return this.mPostGain},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"length",{get:function(){return this.mEffects.length},enumerable:!1,configurable:!0}),t.prototype.pushEffect=function(t){var e=new n(t,this.output),o=0===this.mEffects.length?this.input:this.mEffects[this.mEffects.length-1].output;return o.disconnect(),o.connect(e.input),this.mEffects.push(e),e},t.prototype.push=function(t,e){var n=e?new t(this.context,e):new t(this.context);return this.pushEffect(n)},t.prototype.insertEffect=function(t,e){void 0===e&&(e=0);var o=new n(t),i=0===(e=0===this.mEffects.length?0:Math.min(Math.max(0,e),this.mEffects.length-1))?this.input:this.mEffects[e-1].output,r=e>=this.mEffects.length-1?this.output:this.mEffects[e].input;return i.disconnect(),i.connect(o.input),o.connect(r),this.mEffects.splice(e,0,o),o},t.prototype.insert=function(t,e,n){void 0===e&&(e=0);var o=n?new t(this.context,n):new t(this.context);return this.insertEffect(o,e)},t.prototype.remove=function(t){for(var e=0;e<this.mEffects.length;++e)if(this.mEffects[e].effect instanceof t){var n=this.mEffects[e],o=0===e?this.input:this.mEffects[e-1].output,i=e===this.mEffects.length-1?this.output:this.mEffects[e+1].input;return n.dispose(),o.disconnect(),o.connect(i),this.mEffects.splice(e,1),n}return null},t.prototype.get=function(t){return this.getNth(t,1)},t.prototype.getAllOf=function(t){return this.mEffects.filter((function(e){return e.effect instanceof t}))},t.prototype.getNth=function(t,e){for(var n=0;n<this.mEffects.length;++n)if(this.mEffects[n].effect instanceof t&&--e<=0)return this.mEffects[n];return null},t.prototype.dispose=function(){this.mPreGain.disconnect(),this.mPostGain.disconnect(),this.mEffects.forEach((function(t){return t.dispose()})),this.mPostGain=null,this.mPreGain=null,this.mEffects=null},t}(),i=function(){function t(t,e){this.mNode=t.createGain(),this.mTarget=e||null}return Object.defineProperty(t.prototype,"gain",{get:function(){return this.mNode.gain},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"input",{get:function(){return this.mNode},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"target",{get:function(){return this.mTarget},set:function(t){this.mTarget=t,this.mNode.disconnect(),this.mNode.connect(t)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"hasTarget",{get:function(){return null!==this.mTarget},enumerable:!1,configurable:!0}),t.prototype.connect=function(t){this.target=t},t.prototype.disconnect=function(){this.mNode.disconnect(),this.mTarget=null},t}(),r=function(){function t(t){this.mContext=t,this.mSends=[],this.mInput=new GainNode(t)}return Object.defineProperty(t.prototype,"input",{get:function(){return this.mInput},enumerable:!1,configurable:!0}),t.prototype.create=function(t){var e=new i(this.mContext,t);return this.mInput.connect(e.input),this.mSends.push(e),e},t.prototype.get=function(t){return"number"==typeof t?this.mSends[t]||null:this.mSends.find((function(e){return Object.is(e.target,t)}))||null},t.prototype.remove=function(t){for(var e=0;e<this.mSends.length;++e)if(Object.is(this.mSends[e],t))return this.cleanSend(t),this.mSends.splice(e,1),!0;return!1},t.prototype.removeAll=function(){var t=this;this.mSends.forEach((function(e){return t.cleanSend(e)})),this.mSends=[]},t.prototype.dispose=function(){this.removeAll()},Object.defineProperty(t.prototype,"length",{get:function(){return this.mSends.length},enumerable:!1,configurable:!0}),t.prototype.removeIfTargeting=function(t){for(var e=0;e<this.mSends.length;)Object.is(this.mSends[e].target,t)?(this.cleanSend(this.mSends[e]),this.mSends.splice(e,1)):++e},t.prototype.cleanSend=function(t){t.disconnect(),this.mInput.disconnect(t.input)},t}(),s=function(){function t(t,e){this.mPanner=t.createStereoPanner(),this.mPostGain=t.createGain(),this.mPanner.connect(this.mPostGain),this.mPostGain.connect(e||t.destination),this.mEffects=new o(t,this.mPanner),this.mSends=new r(t),this.mPostGain.connect(this.mSends.input)}return Object.defineProperty(t.prototype,"input",{get:function(){return this.mEffects.input},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"effects",{get:function(){return this.mEffects},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"preGain",{get:function(){return this.mEffects.preGain},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"postGain",{get:function(){return this.mPostGain},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"panner",{get:function(){return this.mPanner},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"sends",{get:function(){return this.mSends},enumerable:!1,configurable:!0}),t.prototype.connect=function(t){this.mPostGain.disconnect(),this.mPostGain.connect(this.mSends.input),this.mPostGain.connect(t)},t.prototype.disconnect=function(){this.mPostGain.disconnect(),this.mPostGain.connect(this.mSends.input)},t.prototype.dispose=function(){this.mPanner.disconnect(),this.mPostGain.disconnect(),this.mEffects.dispose(),this.mSends.dispose(),this.mPanner=null,this.mPostGain=null,this.mEffects=null,this.mSends=null},t}(),u=function(){function t(t,e){this.mContext=t,this.mMasterBus=new s(t,e),this.mBusses=new Map,this.mBusses.set("master",this.mMasterBus)}return Object.defineProperty(t.prototype,"context",{get:function(){return this.mContext},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"master",{get:function(){return this.mMasterBus},enumerable:!1,configurable:!0}),t.prototype.create=function(t,e){if(this.mBusses.has(t))return null;var n=new s(this.context,e||this.mMasterBus.input);return this.mBusses.set(t,n),n},t.prototype.get=function(t){return this.mBusses.get(t)||null},t.prototype.remove=function(t){return this.mBusses.get(t),this.mBusses.delete(t)},t.prototype.dispose=function(){this.mBusses.forEach((function(t){return t.dispose()})),this.mBusses.clear(),this.mBusses=null,this.mMasterBus=null},t}(),c="pointerdown",a=function(){function t(t,e,n){this.mEffects=new o(t,n),this.mSound=e,this.mSound&&this.mSound.connect(this.mEffects.input)}return Object.defineProperty(t.prototype,"effects",{get:function(){return this.mEffects},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"context",{get:function(){return this.mEffects.context},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"source",{get:function(){return this.mSound},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"gain",{get:function(){return this.mEffects.gain.gain},enumerable:!1,configurable:!0}),t.prototype.dispose=function(){var t;null===(t=this.mSound)||void 0===t||t.disconnect(),this.mSound=null,this.mEffects.dispose(),this.mEffects=null},t.prototype.connect=function(t){this.mEffects.connect(t)},t}(),l=function(){function t(t,e){this.mContext=t,this.mTargets=[],e?this.set(e):(this.mAttackTime=0,this.mAttackLevel=1,this.mDecayTime=.5,this.mSustainLevel=.25,this.mHoldTime=.25,this.mReleaseTime=.5)}return Object.defineProperty(t.prototype,"attackTime",{get:function(){return this.mAttackTime},set:function(t){this.mAttackTime=Math.max(0,t)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"attackLevel",{get:function(){return this.mAttackLevel},set:function(t){this.mAttackLevel=Math.max(0,t)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"decayTime",{get:function(){return this.mDecayTime},set:function(t){this.mDecayTime=Math.max(0,t)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"sustainLevel",{get:function(){return this.mSustainLevel},set:function(t){this.mSustainLevel=Math.max(0,t)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"holdTime",{get:function(){return this.mHoldTime},set:function(t){this.mHoldTime=Math.max(0,t)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"releaseTime",{get:function(){return this.mReleaseTime},set:function(t){this.mReleaseTime=Math.max(0,t)},enumerable:!1,configurable:!0}),t.prototype.addTarget=function(t){this.mTargets.push(t)},t.prototype.removeTarget=function(t){for(var e=0;e<this.mTargets.length;++e)if(Object.is(this.mTargets[e],t)){this.mTargets.splice(e,1);break}},t.prototype.set=function(t){var e,n,o,i,r,s;this.mAttackTime=null!==(e=t.attackTime)&&void 0!==e?e:this.mAttackTime,this.mAttackLevel=null!==(n=t.attackLevel)&&void 0!==n?n:this.mAttackLevel,this.mDecayTime=null!==(o=t.decayTime)&&void 0!==o?o:this.mDecayTime,this.mSustainLevel=null!==(i=t.sustainLevel)&&void 0!==i?i:this.mSustainLevel,this.mHoldTime=null!==(r=t.holdTime)&&void 0!==r?r:this.mHoldTime,this.mReleaseTime=null!==(s=t.releaseTime)&&void 0!==s?s:this.mReleaseTime},t.prototype.activate=function(t){var e=this;void 0===t&&(t=0);var n=this.mContext.currentTime+t+.02,o=n+this.mAttackTime,i=n+this.mAttackTime+this.mDecayTime+this.mHoldTime;this.mTargets.forEach((function(t){t.cancelScheduledValues(n),t.linearRampToValueAtTime(0,n),t.setTargetAtTime(e.mAttackLevel,n,.1*e.mAttackTime),t.setTargetAtTime(e.mSustainLevel,o,.1*e.mDecayTime),t.setTargetAtTime(0,i,.1*e.mReleaseTime)}))},t.prototype.cancel=function(t){var e=this;void 0===t&&(t=0),this.mTargets.forEach((function(n){n.cancelScheduledValues(e.mContext.currentTime+t)}))},t}(),p=(t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)},function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}),f=function(t){function e(e,n,o){var i=this,r=o?new OscillatorNode(e,o):new OscillatorNode(e);return(i=t.call(this,e,r,n)||this).envelope=new l(e),i.envelope.addTarget(i.gain),i.gain.value=0,i.source.start(e.currentTime),i}return p(e,t),Object.defineProperty(e.prototype,"type",{get:function(){return this.source.type},set:function(t){this.source.type=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"frequency",{get:function(){return this.source.frequency},enumerable:!1,configurable:!0}),e.prototype.load=function(t){throw"Synth#load should not be called!"},e.prototype.play=function(t){return void 0===t&&(t=0),this.envelope.activate(t),this.source},e.prototype.unload=function(){throw"Synth#unload should not be called!"},e}(a),h=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),m=function(t){function e(e,n,o){var i=new MediaElementAudioSourceNode(e,{mediaElement:o?new Audio(o):new Audio});return t.call(this,e,i,n)||this}return h(e,t),e.prototype.load=function(t){return this.source.mediaElement.src=t,this.source.mediaElement.load(),!0},e.prototype.unload=function(){this.source.mediaElement.src=""},e.prototype.play=function(){return t=this,e=void 0,o=function(){var t=this;return function(t,e){var n,o,i,r,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return r={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function u(u){return function(c){return function(u){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,u[0]&&(s=0)),s;)try{if(n=1,o&&(i=2&u[0]?o.return:u[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,u[1])).done)return i;switch(o=0,i&&(u=[2&u[0],i.value]),u[0]){case 0:case 1:i=u;break;case 4:return s.label++,{value:u[1],done:!1};case 5:s.label++,o=u[1],u=[0];continue;case 7:u=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==u[0]&&2!==u[0])){s=0;continue}if(3===u[0]&&(!i||u[1]>i[0]&&u[1]<i[3])){s.label=u[1];break}if(6===u[0]&&s.label<i[1]){s.label=i[1],i=u;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(u);break}i[2]&&s.ops.pop(),s.trys.pop();continue}u=e.call(t,s)}catch(t){u=[6,t],o=0}finally{n=i=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,c])}}}(this,(function(e){return[2,this.source.mediaElement.play().then((function(){return t.source})).catch((function(){return null}))]}))},new((n=void 0)||(n=Promise))((function(i,r){function s(t){try{c(o.next(t))}catch(t){r(t)}}function u(t){try{c(o.throw(t))}catch(t){r(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,u)}c((o=o.apply(t,e||[])).next())}));var t,e,n,o},e.prototype.stop=function(){this.source.mediaElement.pause(),this.source.mediaElement.currentTime=0},e.prototype.setPause=function(t){t?this.source.mediaElement.pause():this.source.mediaElement.play()},Object.defineProperty(e.prototype,"paused",{get:function(){return this.source.mediaElement.paused},enumerable:!1,configurable:!0}),e.prototype.dispose=function(){this.source.mediaElement.src="",t.prototype.dispose.call(this)},e}(a),d=function(t,e,n){if(n||2===arguments.length)for(var o,i=0,r=e.length;i<r;i++)!o&&i in e||(o||(o=Array.prototype.slice.call(e,0,i)),o[i]=e[i]);return t.concat(o||Array.prototype.slice.call(e))},y=function(){function t(){this.callbacks=[]}return t.prototype.addListener=function(t,e){void 0===e&&(e=null),this.callbacks.push({context:e,callback:t})},t.prototype.removeListener=function(t,e){void 0===e&&(e=null);for(var n=0;n<this.callbacks.length;++n)if(Object.is(this.callbacks[n].callback,t)&&(!e||Object.is(this.callbacks[n].context,e)))return this.callbacks.splice(n,1),!0;return!1},t.prototype.invoke=function(){for(var t,e,n=[],o=0;o<arguments.length;o++)n[o]=arguments[o];for(var i=0;i<this.callbacks.length;++i)this.callbacks[i].context?(t=this.callbacks[i].callback).call.apply(t,d([this.callbacks[i].context],n,!1)):(e=this.callbacks[i]).callback.apply(e,n)},Object.defineProperty(t.prototype,"length",{get:function(){return this.callbacks.length},enumerable:!1,configurable:!0}),t.prototype.clear=function(){this.callbacks=[]},t}();function b(t,e){return n=this,o=void 0,r=function(){var n;return function(t,e){var n,o,i,r,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return r={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function u(u){return function(c){return function(u){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,u[0]&&(s=0)),s;)try{if(n=1,o&&(i=2&u[0]?o.return:u[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,u[1])).done)return i;switch(o=0,i&&(u=[2&u[0],i.value]),u[0]){case 0:case 1:i=u;break;case 4:return s.label++,{value:u[1],done:!1};case 5:s.label++,o=u[1],u=[0];continue;case 7:u=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==u[0]&&2!==u[0])){s=0;continue}if(3===u[0]&&(!i||u[1]>i[0]&&u[1]<i[3])){s.label=u[1];break}if(6===u[0]&&s.label<i[1]){s.label=i[1],i=u;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(u);break}i[2]&&s.ops.pop(),s.trys.pop();continue}u=e.call(t,s)}catch(t){u=[6,t],o=0}finally{n=i=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,c])}}}(this,(function(o){switch(o.label){case 0:return[4,fetch(e)];case 1:return[4,o.sent().arrayBuffer()];case 2:return n=o.sent(),[2,t.decodeAudioData(n)]}}))},new((i=void 0)||(i=Promise))((function(t,e){function s(t){try{c(r.next(t))}catch(t){e(t)}}function u(t){try{c(r.throw(t))}catch(t){e(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof i?n:new i((function(t){t(n)}))).then(s,u)}c((r=r.apply(n,o||[])).next())}));var n,o,i,r}var g,v,w=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),T=function(t){function e(e,n,o){var i=t.call(this,e,null,n)||this;return i.defaults={buffer:null,loop:!1,playbackRate:1,detune:0,loopStart:0,loopEnd:0},i.onended=new y,i.onendedHandler=i.onendedHandler.bind(i),o&&i.load(o),i}return w(e,t),Object.defineProperty(e.prototype,"isLoaded",{get:function(){return null!==this.defaults.buffer},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"looping",{get:function(){return this.defaults.loop},set:function(t){this.defaults.loop=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"loopStart",{get:function(){return this.defaults.loopStart},set:function(t){this.defaults.loopStart=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"loopEnd",{get:function(){return this.defaults.loopEnd},set:function(t){this.defaults.loopEnd=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"playbackRate",{get:function(){return this.defaults.playbackRate},set:function(t){this.defaults.playbackRate=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"detune",{get:function(){return this.defaults.detune},set:function(t){this.defaults.detune=t},enumerable:!1,configurable:!0}),e.prototype.load=function(t){return e=this,n=void 0,i=function(){var e=this;return function(t,e){var n,o,i,r,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return r={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function u(u){return function(c){return function(u){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,u[0]&&(s=0)),s;)try{if(n=1,o&&(i=2&u[0]?o.return:u[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,u[1])).done)return i;switch(o=0,i&&(u=[2&u[0],i.value]),u[0]){case 0:case 1:i=u;break;case 4:return s.label++,{value:u[1],done:!1};case 5:s.label++,o=u[1],u=[0];continue;case 7:u=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==u[0]&&2!==u[0])){s=0;continue}if(3===u[0]&&(!i||u[1]>i[0]&&u[1]<i[3])){s.label=u[1];break}if(6===u[0]&&s.label<i[1]){s.label=i[1],i=u;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(u);break}i[2]&&s.ops.pop(),s.trys.pop();continue}u=e.call(t,s)}catch(t){u=[6,t],o=0}finally{n=i=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,c])}}}(this,(function(n){return[2,b(this.context,t).then((function(t){return e.defaults.buffer=t,!0})).catch((function(t){return console.error(t),!1}))]}))},new((o=void 0)||(o=Promise))((function(t,r){function s(t){try{c(i.next(t))}catch(t){r(t)}}function u(t){try{c(i.throw(t))}catch(t){r(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof o?n:new o((function(t){t(n)}))).then(s,u)}c((i=i.apply(e,n||[])).next())}));var e,n,o,i},e.prototype.onendedHandler=function(t){this.onended.invoke(t.target,this)},e.prototype.unload=function(){this.defaults.buffer=null},e.prototype.play=function(t,e,n){void 0===t&&(t=0),void 0===e&&(e=0);var o=this.defaults?new AudioBufferSourceNode(this.context,this.defaults):new AudioBufferSourceNode(this.context);return o.connect(this.effects.input),o.onended=this.onendedHandler,void 0===n?o.start(this.context.currentTime+t,e):o.start(this.context.currentTime+t,e,n),o},e}(a),S=function(){function t(){this.mContext=null,this.mBusses=null,this.mSounds=new Map,this.mMusic=new Map,this.mSynths=new Map}return Object.defineProperty(t.prototype,"listener",{get:function(){return this.mContext.listener},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"busses",{get:function(){return this.mBusses},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"context",{get:function(){return this.mContext},enumerable:!1,configurable:!0}),t.prototype.getSound=function(t){return this.mSounds.get(t)||null},t.prototype.getMusic=function(t){return this.mMusic.get(t)||null},t.prototype.getSynth=function(t){return this.mSynths.get(t)||null},t.prototype.loadSound=function(t,e){var n=this.mSounds.get(t);if(!n){var o=e?this.mBusses.get(e):this.mBusses.master;o||(o=this.mBusses.master),n=new T(this.context,o.input),this.mSounds.set(t,n),n.load(t).then((function(){return n})).catch((function(){return null}))}return n},t.prototype.loadMusic=function(t,e){var n=this.mMusic.get(t);if(!n){var o=e?this.mBusses.get(e):this.mBusses.master;o||(o=this.mBusses.master),n=new m(this.context,o.input),this.mMusic.set(t,n),n.load(t)}return n},t.prototype.loadSynth=function(t,e,n){void 0===e&&(e="master");var o=this.mSynths.get(t);if(!o){var i=this.mBusses.get(e);o=new f(this.context,i.input,n),this.mSynths.set(t,o)}return o},t.prototype.wasInit=function(){return null!==this.mContext},t.prototype.init=function(){var t=null;try{t=new(window.AudioContext||window.webkitAudioContext)}catch(t){return console.error("AudioContext is not supported in this browser."),!1}return function(t){"running"!==t.state&&window.addEventListener(c,(function e(){t.resume().then((function(){console.log("Resumed AudioContext."),window.removeEventListener(c,e)})).catch((function(t){console.log("Failed to resume AudioContext:",t)}))}))}(t),this.mBusses=new u(t),this.mContext=t,!0},t.prototype.dispose=function(){this.mBusses.dispose(),this.mMusic.forEach((function(t){return t.dispose()})),this.mMusic.clear(),this.mMusic=null,this.mSounds.forEach((function(t){return t.dispose()})),this.mSounds.clear(),this.mSounds=null,this.mContext=null},t}(),P=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();!function(t){t[t.Standby=0]="Standby",t[t.CountDown=1]="CountDown",t[t.PlayTones=2]="PlayTones",t[t.AwaitResponse=3]="AwaitResponse",t[t.Response=4]="Response",t[t.RewardTone=5]="RewardTone",t[t.Result=6]="Result",t[t.MAX_COUNT=7]="MAX_COUNT"}(g||(g={})),function(t){t[t.Start=0]="Start",t[t.Progress=1]="Progress",t[t.Lose=2]="Lose"}(v||(v={}));var O={turnNumber:0,progress:0,speed:800,gameState:g.Standby},E=function(t){function e(){var e={buttons:document.querySelector(".buttons"),playAgain:document.getElementById("play-again"),order:new Uint8Array(30),volume:document.querySelector("#volume"),audio:new S,roundDisplay:document.getElementById("round-display")};return t.call(this,e,O)||this}return P(e,t),e.prototype.startGame=function(){this.reducer(v.Start,null)},e.prototype.progress=function(){this.reducer(v.Progress,null)},e.prototype.lose=function(){this.reducer(v.Lose,null)},e.prototype.genButtonOrder=function(){for(var t=0;t<this.props.order.length;++t)this.props.order[t]=Math.floor(4*Math.random())},e.prototype.reducerImpl=function(t,e,n){switch(t){case v.Start:return this.genButtonOrder(),Object.assign({},O,{gameState:g.PlayTones});case v.Progress:var o={},i=n.progress+1;return i>n.turnNumber?(o.progress=0,n.gameState===g.PlayTones?o.gameState=g.AwaitResponse:n.gameState!==g.Response&&n.gameState!==g.AwaitResponse||(o.turnNumber=n.turnNumber+1,o.gameState=g.PlayTones)):(n.gameState===g.AwaitResponse&&(o.gameState=g.Response),o.progress=i),Object.assign({},n,o);case v.Lose:return Object.assign({},n,{gameState:g.Result});default:return n}},e}(e),k=function(){function t(t){this.model=t,t.onStateUpdated=this.render.bind(this)}return t.prototype.render=function(t){this.renderImpl(t)},t.prototype.cleanup=function(){this.model.onStateUpdated=null},t}(),x=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),j=function(t){function e(e){return t.call(this,e)||this}return x(e,t),e.prototype.renderImpl=function(t){var e=t.props.roundDisplay.children[0],n=t.props.roundDisplay.children[1];(t.state.gameState===g.PlayTones&&t.state.progress>0||0===t.state.turnNumber)&&(e.innerText="ROUND",n.innerText=(t.state.turnNumber+1).toString())},e}(k),A=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),L=function(t){function e(e){var n=t.call(this,e)||this;return n.keydownHandler=n.keydownHandler.bind(n),e.props.audio.init(),b(e.props.audio.context,"audio/ir-cinema-room.wav").then((function(t){n.ir=t,n.init()})),n}return A(e,t),e.prototype.init=function(){this.initOverlay(),this.initVolumeSlider(),this.initPlayAgainButton(),this.initAudio(),this.initButtons(),this.initKeyboardControls()},e.prototype.initAudio=function(){var t=this.model.props.audio,e=t.busses.master.effects.push(ConvolverNode,{buffer:this.ir});t.busses.master.effects.push(BiquadFilterNode,{type:"lowpass",frequency:300,Q:2,gain:.5}),e.setWetDry(.17);var n="sawtooth",o=.05,i=.1,r=.2,s=.25;t.loadSynth("red-button","master",{type:n,frequency:279.42}).envelope.set({attackTime:o,decayTime:s,sustainLevel:r,holdTime:0,releaseTime:i}),t.loadSynth("green-button","master",{type:n,frequency:418.65}).envelope.set({attackTime:o,decayTime:s,sustainLevel:r,holdTime:0,releaseTime:i}),t.loadSynth("blue-button","master",{type:n,frequency:554}).envelope.set({attackTime:o,decayTime:s,sustainLevel:r,holdTime:0,releaseTime:i}),t.loadSynth("yellow-button","master",{type:n,frequency:469.92}).envelope.set({attackTime:o,decayTime:s,sustainLevel:r,holdTime:0,releaseTime:i}),t.loadSynth("you-lost","master",{type:"sine",frequency:200}).envelope.set({attackTime:0,decayTime:s,sustainLevel:r,holdTime:.3,releaseTime:i});var u=new f(t.context);u.gain.value=200,u.type="sine",u.frequency.value=333,u.connect(t.getSynth("you-lost").frequency),console.log(t.getSynth("you-lost"))},e.prototype.initOverlay=function(){var t=this,e=document.getElementById("overlay");e.addEventListener("click",(function(n){n.stopPropagation(),e.classList.contains("hide")||(e.classList.add("hide"),t.model.startGame(),t.resetButtonsClass(),setTimeout((function(){t.playTones(),document.body.removeChild(e)}),1e3))}))},e.prototype.initPlayAgainButton=function(){var t=this,e=this.model.props.playAgain;e.addEventListener("click",(function(n){e.classList.contains("show")&&(e.classList.remove("show"),t.resetButtonsClass(),t.model.startGame(),t.playTones())}))},e.prototype.initKeyboardControls=function(){document.addEventListener("keydown",this.keydownHandler)},e.prototype.initButtons=function(){var t=this,e=this.model.props.buttons;e.addEventListener("click",(function(e){return t.activateButton(e.target)})),e.addEventListener("animationend",(function(t){var e=t.target;"blink"===t.animationName&&(e.classList.remove("blink"),e.children[0].classList.remove("blink"))}))},e.prototype.initVolumeSlider=function(){var t=this,e=document.querySelector("#volume-label > i"),n=this.model.props.volume,o=67;function i(t,e){e.className=0===t?"fa-solid fa-volume-xmark":t<33?"fa-solid fa-volume-off":t<66?"fa-solid fa-volume-low":"fa-solid fa-volume-high"}function r(t,e){e.busses.master.postGain.gain.value=.01*t}n.value=o.toString(),i(o,e),r(o,this.model.props.audio),n.addEventListener("input",(function(s){var u=Number(n.value);o=u,i(u,e),r(u,t.model.props.audio)})),e.addEventListener("click",(function(s){s.stopPropagation();var u=0===Number(n.value)?o:0;i(u,e),r(u,t.model.props.audio),n.value=u.toString()}))},e.prototype.resetButtonsClass=function(){for(var t=this.model.props.buttons.children,e=0;e<t.length;++e){var n=t[e].children[0];n&&(n.classList.remove("lose"),n.classList.remove("blink"))}},e.prototype.activateButton=function(t){var e,n=this;if(t)switch(this.model.state.gameState){case g.Response:case g.AwaitResponse:var o=t.getAttribute("id");this.getAnswerButtonIndex()===function(t){var e;switch(t){case"red-button":e=0;break;case"green-button":e=1;break;case"blue-button":e=2;break;case"yellow-button":e=3;break;default:e=-1}return e}(o)?(this.playButtonAnimSound(t),this.model.progress(),this.model.state.gameState===g.PlayTones&&setTimeout((function(){return n.playTones()}),600)):((e=this.model.props.playAgain).classList.add("show"),e.classList.remove("first-hide"),this.playLoseAnimSound(),this.model.lose())}},e.prototype.playTones=function(){var t=this,e=this.model.props.buttons.children,n=setInterval((function(){t.playButtonAnimSound(e[t.getAnswerButtonIndex()]),t.model.progress(),0===t.model.state.progress&&clearInterval(n)}),this.model.state.speed)},e.prototype.playButtonSound=function(t){var e=this.model.props.audio.getSynth(t.id);e&&e.play()},e.prototype.playLoseAnimSound=function(){for(var t=this.model.props.buttons.children,e=function(e){if(n.getAnswerButtonIndex()!==e){var o=t[e].children[0];o&&o.classList.add("lose")}else{var i=t[e].children[0];i&&setTimeout((function(){return i.classList.add("blink")}),400)}},n=this,o=0;o<t.length;++o)e(o);var i=this.model.props.audio.getSynth("you-lost");i.frequency.value=400,i.play(),setTimeout((function(){i.frequency.value=300,i.play()}),400)},e.prototype.playButtonAnimSound=function(t){this.playButtonSound(t);var e=t.children[0];e.classList.remove("blink"),e.classList.add("blink"),t.classList.remove("blink"),t.classList.add("blink")},e.prototype.getAnswerButtonIndex=function(){return this.model.props.order[this.model.state.progress]},e.prototype.keydownHandler=function(t){if(!t.repeat){var e,n=this.model.props.buttons.children;switch(t.code){case"ArrowLeft":case"KeyA":e=n[3];break;case"ArrowRight":case"KeyD":e=n[1];break;case"ArrowUp":case"KeyW":e=n[0];break;case"ArrowDown":case"KeyS":e=n[2];break;default:e=null}this.activateButton(e)}},e}((function(t){this.model=t})),B=function(){this.model=new E,this.view=new j(this.model),this.controller=new L(this.model)};window.addEventListener("load",(function(){new B}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,